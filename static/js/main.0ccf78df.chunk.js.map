{"version":3,"sources":["utils/users.ts","context/index.tsx","components/common/Progress.tsx","components/Sidebar/UserItem.tsx","components/Sidebar/UserList.tsx","components/Sidebar/index.tsx","components/Content/Header.tsx","utils/message.ts","components/Content/Footer.tsx","components/Content/MessageItem.tsx","components/Content/MessageList.tsx","components/Content/Body.tsx","components/Content/index.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["fetchGetUsers","Promise","res","setTimeout","id","name","instrument","useUsers","useQuery","LayoutContext","React","isMobileSidebarStretched","toggleMobileSidebarToStretched","isMobileContentManualClose","toggleMobileContentManualClose","useLayout","context","Error","LayoutProvider","props","useBoolean","flag","setFlag","flagManual","setFlagManual","useMediaQuery","isMobileWidth","useActiveUser","on","off","value","toggle","Provider","ActiveContext","setId","meta","ActiveProvider","setMeta","users","data","user","find","Progress","h","UserItem","isOnline","isActive","p","onClick","bg","color","cursor","_hover","background","boxSize","ml","fontWeight","fontSize","UserList","isLoading","map","item","num","key","Sidebar","w","borderRight","borderColor","Header","borderBottom","alignItems","above","ArrowBack","mr","getAllUsersMessages","JSON","parse","localStorage","getItem","userId","a","allUsersMessages","messages","resolve","text","prevMessages","newMessage","date","Date","setItem","stringify","useGetMessagesByUserId","fetchGetMessagesByUserId","usePutMessage","options","mutation","useMutation","putMessage","Footer","queryClient","useQueryClient","setValue","mutationPut","onSuccess","invalidateQueries","display","paddingX","borderTop","style","width","onKeyDown","e","keyCode","shiftKey","preventDefault","target","trim","mutate","handleSubmit","placeholder","onChange","MessageItem","str","textAlign","borderRadius","borderEndEndRadius","mb","toLocaleTimeString","navigator","language","hour","minute","split","line","toString","MessageList","toBottom","useScroll","areMessagesExisted","length","height","Info","className","justifyContent","overflow","flexFlow","message","Body","children","el","document","querySelector","scrollTop","scrollHeight","Content","flex","bgGradient","QueryClient","App","theme","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0ccf78df.chunk.js","sourcesContent":["import { useQuery } from \"react-query\";\nexport interface IUser {\n  id: string;\n  name: string;\n  instrument: string;\n}\nfunction fetchGetUsers(): Promise<IUser[]> {\n  return new Promise((res) => {\n    setTimeout(() => {\n      res([\n        { id: \"1\", name: \"Tomas Haake\", instrument: \"drums\" },\n        { id: \"2\", name: \"Tom Morello\", instrument: \"guitar\" },\n        { id: \"3\", name: \"Chino Moreno\", instrument: \"singer\" },\n        { id: \"4\", name: \"Mike Patton\", instrument: \"singer\" },\n        { id: \"5\", name: \"Bj√∂rk\", instrument: \"singer\" },\n        { id: \"6\", name: \"Aurora Aksnes\", instrument: \"singer\" },\n      ]);\n    }, 1000);\n  });\n}\n\nexport function useUsers() {\n  return useQuery(\"users\", fetchGetUsers);\n}\n","import * as React from \"react\";\nimport { useBoolean, useMediaQuery } from \"@chakra-ui/react\";\nimport { useUsers, IUser } from \"../utils/users\";\n\ninterface ILayoutContext {\n  isMobileSidebarStretched: boolean;\n  toggleMobileSidebarToStretched: () => void;\n  isMobileContentManualClose: boolean;\n  toggleMobileContentManualClose: () => void;\n}\nconst LayoutContext = React.createContext({\n  isMobileSidebarStretched: false,\n  toggleMobileSidebarToStretched: () => {},\n  isMobileContentManualClose: false,\n  toggleMobileContentManualClose: () => {},\n});\nexport function useLayout() {\n  const context = React.useContext<ILayoutContext>(LayoutContext);\n  if (!context) {\n    throw new Error(`useLayout must be used within a LayoutProvider`);\n  }\n  return context;\n}\n\ninterface ILayoutProvider {\n  children: React.ReactNode;\n}\nexport function LayoutProvider(props: ILayoutProvider) {\n  const [flag, setFlag] = useBoolean();\n  const [flagManual, setFlagManual] = useBoolean();\n  const [isMobileWidth] = useMediaQuery(\"(max-width: 30em)\");\n  const { id } = useActiveUser();\n  React.useEffect(() => {\n    if (isMobileWidth) {\n      setFlag.on();\n    } else {\n      setFlag.off();\n      setFlagManual.off();\n    }\n  }, [isMobileWidth, setFlag, setFlagManual]);\n\n  React.useEffect(() => {\n    if (id) {\n      setFlagManual.off();\n    } else {\n      setFlagManual.on();\n    }\n  }, [id, setFlagManual]);\n\n  const value = {\n    isMobileSidebarStretched: flag,\n    toggleMobileSidebarToStretched: setFlag.toggle,\n    isMobileContentManualClose: flagManual,\n    toggleMobileContentManualClose: setFlagManual.toggle,\n  };\n\n  return <LayoutContext.Provider value={value} {...props} />;\n}\n\ninterface IActiveContext {\n  id: string | null;\n  setId: (id: string | null) => void;\n  meta: IUser | null;\n}\nconst ActiveContext = React.createContext<IActiveContext>({\n  id: null,\n  setId: (id: string | null) => {},\n  meta: null,\n});\nexport function useActiveUser() {\n  const context = React.useContext(ActiveContext);\n  if (!context) {\n    throw new Error(`useActiveUser must be used within an ActiveProvider`);\n  }\n  return context;\n}\n\ninterface IActiveProvider {\n  children: React.ReactNode;\n}\nexport function ActiveProvider(props: IActiveProvider) {\n  const [id, setId] = React.useState<null | string>(null);\n  const [meta, setMeta] = React.useState<IUser | null>(null);\n  const { data: users } = useUsers();\n  React.useEffect(() => {\n    if (id) {\n      const user = users?.find((user) => user.id === id) || null;\n      setMeta(user);\n    } else {\n      setMeta(null);\n    }\n  }, [id, setMeta, users]);\n\n  const value = {\n    id,\n    setId,\n    meta,\n  };\n  return <ActiveContext.Provider value={value} {...props} />;\n}\n","import * as React from \"react\";\nimport { Center, Spinner } from \"@chakra-ui/react\";\n\nexport function Progress() {\n  return (\n    <Center h=\"100%\">\n      <Spinner />\n    </Center>\n  );\n}\n","import * as React from \"react\";\nimport { Flex, Box, Text, Avatar, AvatarBadge } from \"@chakra-ui/react\";\nimport { IUser } from \"../../utils/users\";\nimport { useActiveUser } from \"../../context\";\n\nexport function UserItem({\n  name,\n  instrument,\n  id,\n  isOnline,\n}: IUser & { isOnline: boolean }) {\n  const { setId, id: activeId } = useActiveUser();\n  const isActive = activeId === id;\n  return (\n    <Flex\n      p={3}\n      onClick={() => {\n        setId(id);\n      }}\n      bg={isActive ? \"blue.400\" : \"white\"}\n      color={isActive ? \"white\" : \"black\"}\n      cursor=\"pointer\"\n      _hover={{\n        background: isActive ? \"\" : \"gray.100\",\n      }}\n    >\n      <Avatar>\n        <AvatarBadge boxSize=\"1.25em\" bg={isOnline ? \"green.500\" : \"tomato\"} />\n      </Avatar>\n      <Box ml=\"3\">\n        <Text fontWeight=\"bold\">{name}</Text>\n        <Text fontSize=\"sm\">{instrument}</Text>\n      </Box>\n    </Flex>\n  );\n}\n","import * as React from \"react\";\nimport { useUsers } from \"../../utils/users\";\nimport { Progress } from \"../common/Progress\";\nimport { UserItem } from \"./UserItem\";\n\nexport function UserList() {\n  const { isLoading, data: users } = useUsers();\n\n  if (isLoading) {\n    return <Progress />;\n  }\n  return (\n    <>\n      {users?.map((item, num) => {\n        return <UserItem {...item} isOnline={!!(num % 2)} key={item.id} />;\n      })}\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Box } from \"@chakra-ui/react\";\n\nimport { useLayout } from \"../../context\";\nimport { UserList } from \"./UserList\";\n\nexport function Sidebar() {\n  const { isMobileSidebarStretched, isMobileContentManualClose } = useLayout();\n  if (isMobileSidebarStretched && !isMobileContentManualClose) {\n    return null;\n  }\n  return (\n    <Box\n      w={[\"100%\", \"30%\", \"20%\"]}\n      bg=\"white\"\n      borderRight=\"1px\"\n      borderColor=\"gray.300\"\n    >\n      <UserList />\n    </Box>\n  );\n}\n","import * as React from \"react\";\nimport { Hide, Flex, Text } from \"@chakra-ui/react\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { useActiveUser } from \"../../context\";\n\nexport function Header() {\n  const { setId, meta } = useActiveUser();\n  return (\n    <Flex\n      bg=\"white\"\n      h=\"8%\"\n      borderBottom=\"1px\"\n      borderColor=\"gray.300\"\n      p={2}\n      alignItems=\"center\"\n    >\n      <Hide above=\"sm\">\n        <ArrowBackIcon\n          cursor=\"pointer\"\n          onClick={() => {\n            setId(null);\n          }}\n          mr={2}\n        />\n      </Hide>\n      <Text fontWeight=\"bold\">{meta?.name}</Text>\n    </Flex>\n  );\n}\n","import { useMutation, UseQueryOptions, useQuery } from \"react-query\";\nexport interface IMessage {\n  text: string;\n  date: Date;\n}\n\ninterface IContents {\n  [userId: string]: IMessage[];\n}\n\nfunction getAllUsersMessages(): Promise<IContents> {\n  return new Promise((res) => {\n    setTimeout(() => {\n      res(\n        JSON.parse(\n          localStorage.getItem(\"allUsersMessages\") as string\n        ) as IContents\n      );\n    }, 1);\n  });\n}\nasync function fetchGetMessagesByUserId(userId: string): Promise<IMessage[]> {\n  const allUsersMessages = (await getAllUsersMessages()) || {};\n  const messages = (allUsersMessages[userId] as IMessage[]) || [];\n  return Promise.resolve(messages);\n}\ninterface IPutMessageInput {\n  text: string;\n  userId: string;\n}\ninterface IPutMessageOutput extends IMessage {\n  userId: string;\n}\nasync function putMessage({\n  text,\n  userId,\n}: IPutMessageInput): Promise<IPutMessageOutput> {\n  let allUsersMessages = (await getAllUsersMessages()) || {};\n  const prevMessages = allUsersMessages[userId];\n  const newMessage = { text, date: new Date() };\n  if (prevMessages) {\n    allUsersMessages[userId] = [...(prevMessages as IMessage[]), newMessage];\n  } else {\n    allUsersMessages[userId] = [newMessage];\n  }\n  localStorage.setItem(\"allUsersMessages\", JSON.stringify(allUsersMessages));\n  return { ...newMessage, userId };\n}\n\nexport function useGetMessagesByUserId(userId: string) {\n  return useQuery([\"messagesByUserId\", userId], () =>\n    fetchGetMessagesByUserId(userId)\n  );\n}\n\nexport function usePutMessage(options?: UseQueryOptions<IPutMessageOutput>) {\n  const mutation = useMutation((data: IPutMessageInput) => {\n    return putMessage(data);\n  }, options);\n  return mutation;\n}\n\n//split text by '\\n'\nexport function parseTextLinesToArray(str: string) {\n  return str.split(\"\\n\");\n}\n","import * as React from \"react\";\nimport { Box, Textarea } from \"@chakra-ui/react\";\nimport { useActiveUser } from \"../../context\";\nimport { usePutMessage } from \"../../utils/message\";\nimport { useQueryClient } from \"react-query\";\n\nexport function Footer() {\n  const queryClient = useQueryClient();\n  const [value, setValue] = React.useState<string>(\"\");\n  const { id } = useActiveUser();\n  const mutationPut = usePutMessage({\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"messagesByUserId\", id]);\n      setValue(\"\");\n    },\n  });\n  const handleSubmit = (e: React.KeyboardEvent<HTMLFormElement>) => {\n    if (e.keyCode === 13 && !e.shiftKey) {\n      e.preventDefault();\n      const text = (e.target as HTMLTextAreaElement).value.trim();\n      if (text !== \"\") {\n        mutationPut.mutate({ text, userId: id as string });\n      }\n    }\n  };\n  return (\n    <Box\n      h=\"15%\"\n      display=\"flex\"\n      alignItems=\"center\"\n      paddingX={5}\n      bg=\"white\"\n      borderTop=\"1px\"\n      borderColor=\"gray.300\"\n    >\n      <form style={{ width: \"100%\" }} onKeyDown={(e) => handleSubmit(e)}>\n        <Textarea\n          name=\"message\"\n          placeholder=\"Write a message...\"\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n        />\n      </form>\n    </Box>\n  );\n}\n","import * as React from \"react\";\nimport { Box, Text } from \"@chakra-ui/react\";\nimport { parseTextLinesToArray, IMessage } from \"../../utils/message\";\n\nexport function MessageItem({ date, text }: IMessage) {\n  return (\n    <Box textAlign=\"right\">\n      <Box\n        key={date.toString()}\n        borderRadius=\"6\"\n        borderEndEndRadius=\"0\"\n        p={2}\n        bg=\"white\"\n        mb={3}\n        display=\"inline-block\"\n        textAlign=\"left\"\n      >\n        <Text fontSize=\"xs\" color=\"gray.300\">\n          {new Date(date).toLocaleTimeString(navigator.language, {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          })}\n        </Text>\n        {parseTextLinesToArray(text).map((line, key) => {\n          return <Box key={key}>{line}</Box>;\n        })}\n      </Box>\n    </Box>\n  );\n}\n","import * as React from \"react\";\nimport { Box, Flex } from \"@chakra-ui/react\";\nimport { useActiveUser } from \"../../context\";\nimport { useGetMessagesByUserId } from \"../../utils/message\";\n\nimport { useScroll, Info } from \"./Body\";\nimport { MessageItem } from \"./MessageItem\";\nimport { Progress } from \"../common/Progress\";\n\nexport function MessageList() {\n  const { id, meta } = useActiveUser();\n  const { data, isLoading } = useGetMessagesByUserId(id as string);\n  const { toBottom } = useScroll();\n  const areMessagesExisted = !!data?.length;\n  React.useLayoutEffect(() => {\n    if (areMessagesExisted) {\n      toBottom();\n    }\n  }, [areMessagesExisted, toBottom]);\n  const height = id ? \"77%\" : \"100%\";\n  if (!areMessagesExisted && meta) {\n    return (\n      <Box h={height}>\n        {isLoading ? <Progress /> : <Info>Say Hi to {meta.name}üëã</Info>}\n      </Box>\n    );\n  }\n  return (\n    <Flex\n      className=\"scrollable-area\"\n      h={height}\n      alignItems=\"end\"\n      justifyContent=\"end\"\n      overflow=\"scroll\"\n      flexFlow=\"row wrap\"\n      p={5}\n    >\n      <Box>\n        {data?.map((message, key) => {\n          return <MessageItem {...message} key={key} />;\n        })}\n      </Box>\n    </Flex>\n  );\n}\n","import * as React from \"react\";\n\nimport { useActiveUser, useLayout } from \"../../context\";\nimport { MessageList } from \"./MessageList\";\nimport { Center, Tag } from \"@chakra-ui/react\";\n\nexport function Body() {\n  const { id } = useActiveUser();\n  const { toBottom } = useScroll();\n  const { isMobileSidebarStretched } = useLayout();\n  React.useEffect(() => {\n    if (id) {\n      toBottom();\n    }\n  }, [id, toBottom]);\n  return (\n    <>\n      {id ? (\n        <MessageList />\n      ) : isMobileSidebarStretched ? null : (\n        <Info>Select a chat to start messaging</Info>\n      )}\n    </>\n  );\n}\n\ninterface IInfo {\n  children: React.ReactNode;\n}\nexport function Info({ children }: IInfo) {\n  return (\n    <Center h=\"100%\" color=\"white\">\n      <Tag>{children}</Tag>\n    </Center>\n  );\n}\n\nexport function useScroll() {\n  return {\n    toBottom: () => {\n      const el = document.querySelector(\".scrollable-area\") as HTMLDivElement;\n      if (el) {\n        el.scrollTop = el.scrollHeight;\n      }\n    },\n  };\n}\n","import * as React from \"react\";\nimport { Box } from \"@chakra-ui/react\";\nimport { useActiveUser, useLayout } from \"../../context\";\nimport { Header } from \"./Header\";\nimport { Footer } from \"./Footer\";\nimport { Body } from \"./Body\";\n\nexport const Content = () => {\n  const { isMobileContentManualClose } = useLayout();\n  const { id } = useActiveUser();\n  return (\n    <Box\n      flex=\"1\"\n      w={[isMobileContentManualClose ? 0 : \"100%\", \"70%\", \"80%\"]}\n      bgGradient=\"linear(to-r, green.300, yellow.200)\"\n    >\n      {id ? <Header /> : null}\n      <Body />\n      {id ? <Footer /> : null}\n    </Box>\n  );\n};\n","import * as React from \"react\";\nimport { ChakraProvider, theme, Flex } from \"@chakra-ui/react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Sidebar } from \"./components/Sidebar\";\nimport { Content } from \"./components/Content\";\nimport { ActiveProvider, LayoutProvider } from \"./context\";\n\nconst queryClient = new QueryClient();\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <QueryClientProvider client={queryClient}>\n      <ActiveProvider>\n        <LayoutProvider>\n          <Flex h=\"100vh\">\n            <Sidebar />\n            <Content />\n          </Flex>\n        </LayoutProvider>\n      </ActiveProvider>\n    </QueryClientProvider>\n  </ChakraProvider>\n);\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}