{"version":3,"sources":["utils/users.ts","context/index.tsx","components/Layout/index.tsx","components/Sidebar/index.tsx","utils/message.ts","components/Content/index.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["fetchGetUsers","Promise","res","setTimeout","id","name","instrument","useUsers","useQuery","LayoutContext","React","isMobileSidebarStretched","toggleMobileSidebarToStretched","isMobileContentManualClose","toggleMobileContentManualClose","useLayout","context","Error","LayoutProvider","props","useBoolean","flag","setFlag","flagManual","setFlagManual","useMediaQuery","isMobileWidth","useActiveUser","on","off","value","toggle","Provider","ActiveContext","setId","meta","ActiveProvider","setMeta","users","data","user","find","Layout","sidebar","children","h","SidebarLayout","w","bg","borderRight","borderColor","ContentLayout","flex","bgGradient","Sidebar","isLoading","activeId","map","num","isActive","p","onClick","color","cursor","_hover","background","boxSize","ml","fontWeight","fontSize","getAllUsersMessages","JSON","parse","localStorage","getItem","userId","a","allUsersMessages","messages","resolve","text","prevMessages","newMessage","date","Date","setItem","stringify","useGetMessagesByUserId","fetchGetMessagesByUserId","usePutMessage","options","mutation","useMutation","putMessage","Header","borderBottom","alignItems","above","ArrowBack","mr","Info","Messages","toBottom","useScroll","areMessagesExisted","length","height","className","justifyContent","overflow","flexFlow","message","key","textAlign","borderRadius","borderEndEndRadius","mb","display","toLocaleTimeString","navigator","language","hour","minute","str","split","line","toString","el","document","querySelector","scrollTop","scrollHeight","Body","Footer","queryClient","useQueryClient","setValue","mutationPut","onSuccess","invalidateQueries","paddingX","borderTop","style","width","onKeyDown","e","keyCode","shiftKey","preventDefault","target","trim","mutate","handleSubmit","placeholder","onChange","Content","QueryClient","App","theme","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.dd91a739.chunk.js","sourcesContent":["import { useQuery } from \"react-query\";\nexport interface IUser {\n  id: string;\n  name: string;\n  instrument: string;\n}\nfunction fetchGetUsers(): Promise<IUser[]> {\n  return new Promise((res) => {\n    setTimeout(() => {\n      res([\n        { id: \"1\", name: \"Tomas Haake\", instrument: \"drums\" },\n        { id: \"2\", name: \"Tom Morello\", instrument: \"guitar\" },\n        { id: \"3\", name: \"Chino Moreno\", instrument: \"singer\" },\n        { id: \"4\", name: \"Mike Patton\", instrument: \"singer\" },\n        { id: \"5\", name: \"BjÃ¶rk\", instrument: \"singer\" },\n        { id: \"6\", name: \"Aurora Aksnes\", instrument: \"singer\" },\n      ]);\n    }, 1000);\n  });\n}\n\nexport function useUsers() {\n  return useQuery(\"users\", fetchGetUsers);\n}\n","import * as React from \"react\";\nimport { useBoolean, useMediaQuery } from \"@chakra-ui/react\";\nimport { useUsers, IUser } from \"../utils/users\";\n\ninterface ILayoutContext {\n  isMobileSidebarStretched: boolean;\n  toggleMobileSidebarToStretched: () => void;\n  isMobileContentManualClose: boolean;\n  toggleMobileContentManualClose: () => void;\n}\nconst LayoutContext = React.createContext({\n  isMobileSidebarStretched: false,\n  toggleMobileSidebarToStretched: () => {},\n  isMobileContentManualClose: false,\n  toggleMobileContentManualClose: () => {},\n});\nexport function useLayout() {\n  const context = React.useContext<ILayoutContext>(LayoutContext);\n  if (!context) {\n    throw new Error(`useLayout must be used within a LayoutProvider`);\n  }\n  return context;\n}\n\ninterface ILayoutProvider {\n  children: React.ReactNode;\n}\nexport function LayoutProvider(props: ILayoutProvider) {\n  const [flag, setFlag] = useBoolean();\n  const [flagManual, setFlagManual] = useBoolean();\n  const [isMobileWidth] = useMediaQuery(\"(max-width: 30em)\");\n  const { id } = useActiveUser();\n  React.useEffect(() => {\n    if (isMobileWidth) {\n      setFlag.on();\n    } else {\n      setFlag.off();\n      setFlagManual.off();\n    }\n  }, [isMobileWidth, setFlag, setFlagManual]);\n\n  React.useEffect(() => {\n    if (id) {\n      setFlagManual.off();\n    } else {\n      setFlagManual.on();\n    }\n  }, [id, setFlagManual]);\n\n  const value = {\n    isMobileSidebarStretched: flag,\n    toggleMobileSidebarToStretched: setFlag.toggle,\n    isMobileContentManualClose: flagManual,\n    toggleMobileContentManualClose: setFlagManual.toggle,\n  };\n\n  return <LayoutContext.Provider value={value} {...props} />;\n}\n\ninterface IActiveContext {\n  id: string | null;\n  setId: (id: string | null) => void;\n  meta: IUser | null;\n}\nconst ActiveContext = React.createContext<IActiveContext>({\n  id: null,\n  setId: (id: string | null) => {},\n  meta: null,\n});\nexport function useActiveUser() {\n  const context = React.useContext(ActiveContext);\n  if (!context) {\n    throw new Error(`useActiveUser must be used within an ActiveProvider`);\n  }\n  return context;\n}\n\ninterface IActiveProvider {\n  children: React.ReactNode;\n}\nexport function ActiveProvider(props: IActiveProvider) {\n  const [id, setId] = React.useState<null | string>(null);\n  const [meta, setMeta] = React.useState<IUser | null>(null);\n  const { data: users } = useUsers();\n  React.useEffect(() => {\n    if (id) {\n      const user = users?.find((user) => user.id === id) || null;\n      setMeta(user);\n    } else {\n      setMeta(null);\n    }\n  }, [id, setMeta, users]);\n\n  const value = {\n    id,\n    setId,\n    meta,\n  };\n  return <ActiveContext.Provider value={value} {...props} />;\n}\n","import * as React from \"react\";\nimport { Flex, Box } from \"@chakra-ui/react\";\nimport { useLayout, ActiveProvider, LayoutProvider } from \"../../context\";\n\ninterface Props {\n  sidebar: React.ReactNode;\n  children: React.ReactNode;\n}\nexport const Layout = ({ sidebar, children }: Props) => {\n  return (\n    <ActiveProvider>\n      <LayoutProvider>\n        <Flex h=\"100vh\">\n          <SidebarLayout>{sidebar}</SidebarLayout>\n          <ContentLayout>{children}</ContentLayout>\n        </Flex>\n      </LayoutProvider>\n    </ActiveProvider>\n  );\n};\ninterface SidebarLayoutProps {\n  children: React.ReactNode;\n}\n\nfunction SidebarLayout({ children }: SidebarLayoutProps) {\n  const { isMobileSidebarStretched, isMobileContentManualClose } = useLayout();\n  if (isMobileSidebarStretched && !isMobileContentManualClose) {\n    return null;\n  }\n  return (\n    <Box\n      w={[\"100%\", \"30%\", \"20%\"]}\n      bg=\"white\"\n      borderRight=\"1px\"\n      borderColor=\"gray.300\"\n    >\n      {children}\n    </Box>\n  );\n}\ninterface ContentLayoutProps {\n  children: React.ReactNode;\n}\nexport const ContentLayout = ({ children }: ContentLayoutProps) => {\n  const { isMobileContentManualClose } = useLayout();\n  return (\n    <Box\n      flex=\"1\"\n      w={[isMobileContentManualClose ? 0 : \"100%\", \"70%\", \"80%\"]}\n      bgGradient=\"linear(to-r, green.300, yellow.200)\"\n    >\n      {children}\n    </Box>\n  );\n};\n","import * as React from \"react\";\nimport {\n  Flex,\n  Box,\n  Text,\n  Spinner,\n  Avatar,\n  AvatarBadge,\n  Center,\n} from \"@chakra-ui/react\";\nimport { useUsers } from \"../../utils/users\";\nimport { useActiveUser } from \"../../context\";\n\nexport function Sidebar() {\n  const { isLoading, data: users } = useUsers();\n  const { setId, id: activeId } = useActiveUser();\n  if (isLoading) {\n    return (\n      <Center h=\"100%\">\n        <Spinner />\n      </Center>\n    );\n  }\n  return (\n    <>\n      {users?.map(({ id, name, instrument }, num) => {\n        const isActive = activeId === id;\n        return (\n          <Flex\n            key={id}\n            p={3}\n            onClick={() => {\n              setId(id);\n            }}\n            bg={isActive ? \"blue.400\" : \"white\"}\n            color={isActive ? \"white\" : \"black\"}\n            cursor=\"pointer\"\n            _hover={{\n              background: isActive ? \"\" : \"gray.100\",\n            }}\n          >\n            <Avatar>\n              <AvatarBadge\n                boxSize=\"1.25em\"\n                bg={num % 2 ? \"green.500\" : \"tomato\"}\n              />\n            </Avatar>\n            <Box ml=\"3\">\n              <Text fontWeight=\"bold\">{name}</Text>\n              <Text fontSize=\"sm\">{instrument}</Text>\n            </Box>\n          </Flex>\n        );\n      })}\n    </>\n  );\n}\n","import { useMutation, UseQueryOptions, useQuery } from \"react-query\";\ninterface IMessage {\n  text: string;\n  date: Date;\n}\n\ninterface IContents {\n  [userId: string]: IMessage[];\n}\n\nfunction getAllUsersMessages(): Promise<IContents> {\n  return new Promise((res) => {\n    setTimeout(() => {\n      res(\n        JSON.parse(\n          localStorage.getItem(\"allUsersMessages\") as string\n        ) as IContents\n      );\n    }, 1);\n  });\n}\nasync function fetchGetMessagesByUserId(userId: string): Promise<IMessage[]> {\n  const allUsersMessages = (await getAllUsersMessages()) || {};\n  const messages = (allUsersMessages[userId] as IMessage[]) || [];\n  return Promise.resolve(messages);\n}\ninterface IPutMessageInput {\n  text: string;\n  userId: string;\n}\ninterface IPutMessageOutput extends IMessage {\n  userId: string;\n}\nasync function putMessage({\n  text,\n  userId,\n}: IPutMessageInput): Promise<IPutMessageOutput> {\n  let allUsersMessages = (await getAllUsersMessages()) || {};\n  const prevMessages = allUsersMessages[userId];\n  const newMessage = { text, date: new Date() };\n  if (prevMessages) {\n    allUsersMessages[userId] = [...(prevMessages as IMessage[]), newMessage];\n  } else {\n    allUsersMessages[userId] = [newMessage];\n  }\n  localStorage.setItem(\"allUsersMessages\", JSON.stringify(allUsersMessages));\n  return { ...newMessage, userId };\n}\n\nexport function useGetMessagesByUserId(userId: string) {\n  return useQuery([\"messagesByUserId\", userId], () =>\n    fetchGetMessagesByUserId(userId)\n  );\n}\n\nexport function usePutMessage(options?: UseQueryOptions<IPutMessageOutput>) {\n  const mutation = useMutation((data: IPutMessageInput) => {\n    return putMessage(data);\n  }, options);\n  return mutation;\n}\n\n//split text by '\\n'\nexport function parseTextLinesToArray(str: string) {\n  return str.split(\"\\n\");\n}\n","import * as React from \"react\";\nimport {\n  Box,\n  Hide,\n  Textarea,\n  Flex,\n  Tag,\n  Center,\n  Text,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { useActiveUser, useLayout } from \"../../context\";\nimport {\n  usePutMessage,\n  useGetMessagesByUserId,\n  parseTextLinesToArray,\n} from \"../../utils/message\";\nimport { useQueryClient } from \"react-query\";\n\nfunction Header() {\n  const { setId, meta } = useActiveUser();\n  return (\n    <Flex\n      bg=\"white\"\n      h=\"8%\"\n      borderBottom=\"1px\"\n      borderColor=\"gray.300\"\n      p={2}\n      alignItems=\"center\"\n    >\n      <Hide above=\"sm\">\n        <ArrowBackIcon\n          cursor=\"pointer\"\n          onClick={() => {\n            setId(null);\n          }}\n          mr={2}\n        />\n      </Hide>\n      <Text fontWeight=\"bold\">{meta?.name}</Text>\n    </Flex>\n  );\n}\ninterface IInfo {\n  children: React.ReactNode;\n}\nfunction Info({ children }: IInfo) {\n  return (\n    <Center h=\"100%\" color=\"white\">\n      <Tag>{children}</Tag>\n    </Center>\n  );\n}\nfunction Messages() {\n  const { id, meta } = useActiveUser();\n  const { data, isLoading } = useGetMessagesByUserId(id as string);\n  const { toBottom } = useScroll();\n  const areMessagesExisted = !!data?.length;\n  React.useLayoutEffect(() => {\n    if (areMessagesExisted) {\n      toBottom();\n    }\n  }, [areMessagesExisted, toBottom]);\n  const height = id ? \"77%\" : \"100%\";\n  if (!areMessagesExisted && meta) {\n    return (\n      <Box h={height}>\n        {isLoading ? (\n          <Center h=\"100%\">\n            <Spinner />\n          </Center>\n        ) : (\n          <Info>Say Hi to {meta.name}ð</Info>\n        )}\n      </Box>\n    );\n  }\n  return (\n    <Flex\n      className=\"scrollable-area\"\n      h={height}\n      alignItems=\"end\"\n      justifyContent=\"end\"\n      overflow=\"scroll\"\n      flexFlow=\"row wrap\"\n      p={5}\n    >\n      <Box>\n        {data?.map((message, key) => {\n          return (\n            <Box textAlign=\"right\" key={key}>\n              <Box\n                key={message.date.toString()}\n                borderRadius=\"6\"\n                borderEndEndRadius=\"0\"\n                p={2}\n                bg=\"white\"\n                mb={3}\n                display=\"inline-block\"\n                textAlign=\"left\"\n              >\n                <Text fontSize=\"xs\" color=\"gray.300\">\n                  {new Date(message.date).toLocaleTimeString(\n                    navigator.language,\n                    {\n                      hour: \"2-digit\",\n                      minute: \"2-digit\",\n                    }\n                  )}\n                </Text>\n                {parseTextLinesToArray(message.text).map((line, key) => {\n                  return <Box key={key}>{line}</Box>;\n                })}\n              </Box>\n            </Box>\n          );\n        })}\n      </Box>\n    </Flex>\n  );\n}\nfunction useScroll() {\n  return {\n    toBottom: () => {\n      const el = document.querySelector(\".scrollable-area\") as HTMLDivElement;\n      if (el) {\n        el.scrollTop = el.scrollHeight;\n      }\n    },\n  };\n}\nfunction Body() {\n  const { id } = useActiveUser();\n  const { toBottom } = useScroll();\n  const { isMobileSidebarStretched } = useLayout();\n  React.useEffect(() => {\n    if (id) {\n      toBottom();\n    }\n  }, [id, toBottom]);\n  return (\n    <>\n      {id ? (\n        <Messages />\n      ) : isMobileSidebarStretched ? null : (\n        <Info>Select a chat to start messaging</Info>\n      )}\n    </>\n  );\n}\n\nfunction Footer() {\n  const queryClient = useQueryClient();\n  const [value, setValue] = React.useState<string>(\"\");\n  const { id } = useActiveUser();\n  const mutationPut = usePutMessage({\n    onSuccess: () => {\n      queryClient.invalidateQueries([\"messagesByUserId\", id]);\n      setValue(\"\");\n    },\n  });\n  const handleSubmit = (e: React.KeyboardEvent<HTMLFormElement>) => {\n    if (e.keyCode === 13 && !e.shiftKey) {\n      e.preventDefault();\n      const text = (e.target as HTMLTextAreaElement).value.trim();\n      if (text !== \"\") {\n        mutationPut.mutate({ text, userId: id as string });\n      }\n    }\n  };\n  return (\n    <Box\n      h=\"15%\"\n      display=\"flex\"\n      alignItems=\"center\"\n      paddingX={5}\n      bg=\"white\"\n      borderTop=\"1px\"\n      borderColor=\"gray.300\"\n    >\n      <form style={{ width: \"100%\" }} onKeyDown={(e) => handleSubmit(e)}>\n        <Textarea\n          name=\"message\"\n          placeholder=\"Write a message...\"\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n        />\n      </form>\n    </Box>\n  );\n}\n\nexport const Content = () => {\n  const { id } = useActiveUser();\n  return (\n    <>\n      {id ? <Header /> : null}\n      <Body />\n      {id ? <Footer /> : null}\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { ChakraProvider, theme } from \"@chakra-ui/react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Layout } from \"./components/Layout\";\nimport { Sidebar } from \"./components/Sidebar\";\nimport { Content } from \"./components/Content\";\n\nconst queryClient = new QueryClient();\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <QueryClientProvider client={queryClient}>\n      <Layout sidebar={<Sidebar />}>\n        <Content />\n      </Layout>\n    </QueryClientProvider>\n  </ChakraProvider>\n);\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}